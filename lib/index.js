// Generated by CoffeeScript 1.3.1
var Event, MailParser, ServerListener, net, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

net = require("net");

Event = require("events").EventEmitter;

MailParser = require("mailparser").MailParser;

_ = require("underscore");

ServerListener = (function(_super) {

  __extends(ServerListener, _super);

  ServerListener.name = 'ServerListener';

  function ServerListener() {
    return ServerListener.__super__.constructor.apply(this, arguments);
  }

  ServerListener.prototype.start = function(port) {
    var self, server;
    if (port == null) {
      port = 25;
    }
    self = this;
    server = net.createServer(function(stream) {
      var stdresponse;
      stream.setEncoding("utf8");
      stream.out = function(msg) {
        return stream.write(msg + '\r\n');
      };
      stdresponse = function() {
        return stream.out('250 nodejs.io');
      };
      stream.isBody = false;
      stream.body = "";
      stream.recipient = "";
      stream.on("connect", function() {
        stream.isBody = false;
        stream.body = "";
        stream.recipient = "";
        return stream.out('220 SMTP nodejs');
      });
      return stream.on("data", function(m) {
        var code, lines, mailparser;
        code = m.split(" ")[0].match(/.*/)[0];
        if (stream.isBody) {
          lines = _.compact(m.split('\r\n'));
          if (_.last(lines) === ".") {
            stream.isBody = false;
          }
          stream.body += m;
          if (!stream.isBody) {
            mailparser = new MailParser;
            mailparser.on("end", function(mail_object) {
              return self.emit("msg", stream.recipient, stream.body, mail_object);
            });
            mailparser.write(stream.body);
            mailparser.end();
          }
        }
        switch (code) {
          case "EHLO":
            return stream.out('502 Unsupported here');
          case "RCPT":
            stream.recipient = m.match(/\<(.*)\>/)[1];
            return stdresponse();
          case "DATA":
            stream.isBody = true;
            return stream.out('354 Enter mail, end with "." on a line by itself');
          case "QUIT":
            stream.out('221 Bye');
            return stream.destroy();
          default:
            return stdresponse();
        }
      });
    });
    server.listen(port);
    return console.log("mail listener has started on port " + port);
  };

  ServerListener.prototype.trim = function(text) {
    return text.replace(/^\s+|\s+$/gi, '');
  };

  return ServerListener;

})(Event);

module.exports = new ServerListener();
